# trigger:
# - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  subscription: TestServiceConnectVala

steps:

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  inputs:
    terraformVersion: '1.4.2'

- task: TerraformTaskV1@0
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendConfig: '.terraform.lock.hcl'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deployments/dev'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: "en-mltfstate-dev-rg-we"
    backendAzureRmStorageAccountName: "enmltfstatedevsawe"
    backendAzureRmContainerName: "tfstate"
    backendAzureRmKey: "dev.terraform.tfstate"
    commandOptions: '-reconfigure'

- task: TerraformTaskV1@0
  displayName: terraform plan -out=tfplan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deployments/dev'
    commandOptions: '-var-file="dev.tfvars"' 
    environmentServiceNameAzureRM: '$(subscription)'

- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deployments/dev'
    commandOptions: '-var-file="dev.tfvars"' 
    environmentServiceNameAzureRM: '$(subscription)'
# pool:
#   vmImage: 'ubuntu-latest'

# variables:
#   subscription: TestServiceConnectVala
# steps:

# - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#   inputs:
#     terraformVersion: '1.4.2'

# - task: AzureCLI@2
#   displayName: 'Azure CLI get_remote_state_sas_key.sh'
#   inputs:
#     azureSubscription: $(subscription)
#     scriptType: bash
#     scriptLocation: inlineScript
#     inlineScript: |
#       export ARM_SAS_TOKEN=$(bash $(System.DefaultWorkingDirectory)/scripts//get_remote_state_sas_key.sh -n enmltfstateprodsawe -c tfstate)
#       cd $(System.DefaultWorkingDirectory)/deployments/dev
#       terraform init -reconfigure
#     addSpnToEnvironment: true


# - task: AzureCLI@2
#   displayName: 'Azure CLI terraform init'
#   inputs:
#     azureSubscription: $(subscription)
#     scriptType: bash
#     scriptLocation: inlineScript
#     inlineScript: |
#       cd $(System.DefaultWorkingDirectory)/deployments/dev
#       export ARM_CLIENT_ID=$servicePrincipalId
#       export ARM_CLIENT_SECRET=$servicePrincipalKey
#       export ARM_TENANT_ID=$tenantId
#       export ARM_SUBSCRIPTION_ID=$subscriptionId
#       terraform init -reconfigure
#       terraform plan -var-file=$(System.DefaultWorkingDirectory)/deployments/dev/dev.tfvars
#       terraform apply 
#     addSpnToEnvironment: true

# - task: AzureCLI@2
#   displayName: 'Azure CLI terraform plan'
#   inputs:
#     azureSubscription: $(subscription)
#     scriptType: bash
#     scriptLocation: inlineScript
#     inlineScript: |
#       cd $(System.DefaultWorkingDirectory)/deployments/dev/
#       terraform plan -var-file=$(System.DefaultWorkingDirectory)/deployments/dev/dev.tfvars
#     addSpnToEnvironment: true

# - task: AzureCLI@2
#   displayName: 'Azure CLI terraform apply'
#   inputs:
#     azureSubscription: $(subscription)
#     scriptType: bash
#     scriptLocation: inlineScript
#     inlineScript: |
#       cd $(System.DefaultWorkingDirectory)/deployments/dev/
#       terraform apply 
#     addSpnToEnvironment: true   

# - task: AzureCLI@2
#   displayName: Azure CLI number 2
#   inputs:
#     azureSubscription: $(subscription)
#     scriptType: bash
#     scriptLocation: inlineScript
#     inlineScript: |
#       az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET)  --tenant $(ARM_TENANT_ID)
      
#       az account show
#       subscriptionId=$(az account show --query 'id' -o tsv)
      
      
#       az account set --subscription "$subscriptionId"
      
#       cd $(System.DefaultWorkingDirectory)/scripts/
#       az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET)  --tenant $(ARM_TENANT_ID)
#     addSpnToEnvironment: true

# - task: Bash@3
#   inputs:
#     filePath: '$(System.DefaultWorkingDirectory)/scripts/get_remote_state_sas_key.sh'
#     arguments: '-n enmltfstatedevsawe -c tfstate'

#- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#  inputs:
#    terraformVersion: '1.4.2'

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      SAS_KEY=$(az storage container generate-sas --account-name $NAME --account-key $STORAGE_KEY --name $CONTAINER --permissions acdlrw --expiry $EXPIRY --https-only -o tsv)
#      echo $(ARM_SUBSCRIPTION_ID)
#    displayName: 'test'  

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo $(ARM_SUBSCRIPTION_ID)
#       az account set --subscription "${ARM_SUBSCRIPTION_ID}"
#       az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET)  --tenant $(ARM_TENANT_ID)
#       cd $(System.DefaultWorkingDirectory)/deployments/dev/
#       terraform init -reconfigure
#     displayName: 'Terraform init'   